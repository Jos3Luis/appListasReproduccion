/*
 * Creado por Jose Luis
 * Quispe Aracayo
 */
package prjlista;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author JOSE
 */
public class ListaV extends javax.swing.JFrame {

    private DefaultListModel mlist;
    private ArrayList<String> archivos;

    //private ArrayList<String> xOrden;
    private ArrayList<String> xNombre;
    private ArrayList<String> xAleatorio;

    private static final int XACTUAL = 0;
    private static final int XNOMBRE = 1;
    private static final int XALEATORIO = 2;

    private int opc = 0;

    public ListaV() {
        initComponents();
        mlist = new DefaultListModel();
        jlista.setModel(mlist);
        archivos = new ArrayList<>();

        xNombre = new ArrayList<>();
        xAleatorio = new ArrayList<>();

        new DropTarget(jlista, new DropTargetListener() {
            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {

            }

            @Override
            public void drop(DropTargetDropEvent event) {
                event.acceptDrop(DnDConstants.ACTION_COPY);
                Transferable transferable = event.getTransferable();
                DataFlavor[] flavors = transferable.getTransferDataFlavors();
                for (DataFlavor flavor : flavors) {
                    try {
                        if (flavor.isFlavorJavaFileListType()) {
                            mlist.clear();
                            //guardo en el objeto archivos
                            List<File> files = (List) transferable.getTransferData(flavor);
                            for (File file : files) {
                                archivos.add(file.getAbsolutePath());
                            }
                            //actualizo el jlist
                            actualizar();
                        }
                    } catch (Exception e) {

                        e.printStackTrace();
                    }
                }
                event.dropComplete(true);
            }

        });
    }

    private void generarxActual() {
        mlist.clear();
        for (int i = 0; i < archivos.size(); i++) {
            mlist.addElement(new File(archivos.get(i)).getName());
        }
    }

    private void actualizar() {
        if (jrbtnActual.isSelected()) {
            generarxActual();
        } else if (jrbtnAleatorio.isSelected()) {
            generarxAleatorio();
        } else if (jrbtnNombre.isSelected()) {
            generarxNombre();
        }
    }

    private void generarxNombre() {
        mlist.clear();
        xNombre.clear();
        for (String f : archivos) {
            xNombre.add(f);
        }
        Collections.sort(xNombre);
        for (int i = 0; i < xNombre.size(); i++) {
            mlist.addElement(new File(xNombre.get(i)).getName());
        }
    }

    private void generarxAleatorio() {
        mlist.clear();
        xAleatorio.clear();
        for (String f : archivos) {
            xAleatorio.add(f);
        }
        Collections.shuffle(xAleatorio);
        for (int i = 0; i < xAleatorio.size(); i++) {
            mlist.addElement(new File(xAleatorio.get(i)).getName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jrbtnActual = new javax.swing.JRadioButton();
        jrbtnNombre = new javax.swing.JRadioButton();
        jrbtnAleatorio = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlista = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jcbReproductor = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        btnExportar = new javax.swing.JButton();
        jbtnCarpeta = new javax.swing.JButton();
        jbtnRecuperar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbtnUp = new javax.swing.JButton();
        jbtnDown = new javax.swing.JButton();
        jbtnQuitar = new javax.swing.JButton();
        jbtnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador de Lista MPlayer");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Orden"));

        buttonGroup1.add(jrbtnActual);
        jrbtnActual.setSelected(true);
        jrbtnActual.setText("Orden");
        jrbtnActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbtnActualActionPerformed(evt);
            }
        });

        buttonGroup1.add(jrbtnNombre);
        jrbtnNombre.setText("Nombre");
        jrbtnNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbtnNombreActionPerformed(evt);
            }
        });

        buttonGroup1.add(jrbtnAleatorio);
        jrbtnAleatorio.setText("Aleatorio");
        jrbtnAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbtnAleatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jrbtnActual, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jrbtnNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jrbtnAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbtnActual)
                    .addComponent(jrbtnNombre)
                    .addComponent(jrbtnAleatorio))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jlista.setDragEnabled(true);
        jScrollPane1.setViewportView(jlista);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Reproductor"));

        jcbReproductor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Player Clasic [PC]", "Windows Media Player[PC]", "PlayerPro Music Player[Android]" }));
        jcbReproductor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbReproductorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jcbReproductor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcbReproductor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Acciones"));

        btnExportar.setText("Guardar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jbtnCarpeta.setText("A Carpeta");
        jbtnCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCarpetaActionPerformed(evt);
            }
        });

        jbtnRecuperar.setText("Recuperar");
        jbtnRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRecuperarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnRecuperar, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(jbtnCarpeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btnExportar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnRecuperar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnCarpeta)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jbtnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/up_s.png"))); // NOI18N
        jbtnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpActionPerformed(evt);
            }
        });

        jbtnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/down_s.png"))); // NOI18N
        jbtnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDownActionPerformed(evt);
            }
        });

        jbtnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/delete.png"))); // NOI18N
        jbtnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnQuitarActionPerformed(evt);
            }
        });

        jbtnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/limpiar.png"))); // NOI18N
        jbtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnQuitar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .addComponent(jbtnUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnDown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnQuitar)
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrbtnNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbtnNombreActionPerformed
        generarxNombre();
        opc = XNOMBRE;
    }//GEN-LAST:event_jrbtnNombreActionPerformed

    private void jrbtnActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbtnActualActionPerformed
        generarxActual();
        opc = XACTUAL;
    }//GEN-LAST:event_jrbtnActualActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        String contenido = "";
        switch (opc) {
            case XNOMBRE: {
                if (jcbReproductor.getSelectedIndex() == 0) {//Player Classic
                    contenido = getContenidoPlayerClassic(xNombre);
                } else if (jcbReproductor.getSelectedIndex() == 1) {
                    contenido = getContenidoWMPlayer(xNombre);
                }
            }
            break;
            case XALEATORIO: {
                if (jcbReproductor.getSelectedIndex() == 0) {//Player Classic
                    contenido = getContenidoPlayerClassic(xAleatorio);
                } else if (jcbReproductor.getSelectedIndex() == 1) {
                    contenido = getContenidoWMPlayer(xAleatorio);
                }
            }
            break;
            case XACTUAL: {
                if (jcbReproductor.getSelectedIndex() == 0) {//Player Classic
                    contenido = getContenidoPlayerClassic(archivos);//xOrden ya no se usa ya que todo esta en archivos
                } else if (jcbReproductor.getSelectedIndex() == 1) {
                    contenido = getContenidoWMPlayer(archivos);
                }
            }
            break;
        }
        JFileChooser jfc = new JFileChooser();
        int retorno = jfc.showSaveDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            String ruta = f.getAbsolutePath() + getExtension();
            Writer salida = null;
            try {
                salida = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(ruta)), "utf-8"));
                salida.write(contenido);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.toString());
            } finally {
                try {
                    salida.close();
                } catch (Exception ex) {/*ignore*/
                }
            }
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void jbtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLimpiarActionPerformed
        mlist.clear();
        archivos.clear();
        xAleatorio.clear();
        xNombre.clear();

    }//GEN-LAST:event_jbtnLimpiarActionPerformed

    private void jrbtnAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbtnAleatorioActionPerformed
        generarxAleatorio();
        opc = XALEATORIO;
    }//GEN-LAST:event_jrbtnAleatorioActionPerformed

    private void jcbReproductorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbReproductorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbReproductorActionPerformed

    private void jbtnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnQuitarActionPerformed
        if (jlista.getSelectedIndex() > 0) {
            int i = 0;
            String cadena = jlista.getSelectedValue();
            for (i = 0; i < archivos.size(); i++) {
                if (archivos.get(i).contains(cadena)) {
                    archivos.remove(i);
                    break;
                }
            }
            actualizar();

        }
    }//GEN-LAST:event_jbtnQuitarActionPerformed

    private void jbtnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpActionPerformed
        if (jlista.getSelectedIndex() > 0) {
            String cadena = jlista.getSelectedValue();
            for (int i = 0; i < archivos.size(); i++) {
                if (archivos.get(i).contains(cadena)) {
                    if (i > 0) {
                        String aux = archivos.get(i - 1);
                        archivos.set(i - 1, archivos.get(i));
                        archivos.set(i, aux);
                        break;
                    }
                }
            }
            actualizar();
        }
    }//GEN-LAST:event_jbtnUpActionPerformed

    private void jbtnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDownActionPerformed
        if (jlista.getSelectedIndex() > 0) {
            String cadena = jlista.getSelectedValue();
            for (int i = 0; i < archivos.size(); i++) {
                if (archivos.get(i).contains(cadena)) {
                    if (i < archivos.size() - 1) {
                        String aux = archivos.get(i + 1);
                        archivos.set(i + 1, archivos.get(i));
                        archivos.set(i, aux);
                        break;
                    }
                }
            }
            actualizar();
        }
    }//GEN-LAST:event_jbtnDownActionPerformed

    private void jbtnCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCarpetaActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int retorno = jfc.showSaveDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File ruta = jfc.getSelectedFile();
            if (ruta.mkdir()) {
                try {
                    for (int i = 0; i < archivos.size(); i++) {
                        copyFile(new File(archivos.get(i)), new File(ruta.getAbsolutePath() + "/" + new File(archivos.get(i)).getName()));
                    }
                } catch (Exception e) {
                }

            }
        }


    }//GEN-LAST:event_jbtnCarpetaActionPerformed

    private void jbtnRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRecuperarActionPerformed
        JFileChooser jfc = new JFileChooser();
        int retorno = jfc.showOpenDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            String ruta = f.getAbsolutePath();
            BufferedReader entrada = null;
            jbtnLimpiar.doClick();
            try {
                String readLinea = null;
                entrada = new BufferedReader(new InputStreamReader(new FileInputStream(new File(ruta)), "utf8"), 8192);
                String ext = getExtensionFile(f.getName());
                while ((readLinea = entrada.readLine()) != null) {
                    if (ext.toLowerCase().equals("mpcpl")) { //mpc                        
                        String buscar = ",filename,";
                        int ini = readLinea.indexOf(buscar);
                        if (ini > 0) {
                            ini += buscar.length();
                            archivos.add(readLinea.substring(ini));
                        }
                    } else if (ext.toLowerCase().equals("wpl")) { //microsoft
                        String buscar = "<media src=\"";                        
                        int ini = readLinea.indexOf(buscar);
                        int posfinal=readLinea.indexOf("\"/>");
                        if (ini > 0 && posfinal>0) {
                            ini += buscar.length();
                            archivos.add(readLinea.substring(ini,posfinal));
                        }
                    }
                }
                actualizar();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.toString());
            } finally {
                try {
                    entrada.close();
                } catch (Exception ex) {/*ignore*/
                }
            }
        }


    }//GEN-LAST:event_jbtnRecuperarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbtnCarpeta;
    private javax.swing.JButton jbtnDown;
    private javax.swing.JButton jbtnLimpiar;
    private javax.swing.JButton jbtnQuitar;
    private javax.swing.JButton jbtnRecuperar;
    private javax.swing.JButton jbtnUp;
    private javax.swing.JComboBox<String> jcbReproductor;
    private javax.swing.JList<String> jlista;
    private javax.swing.JRadioButton jrbtnActual;
    private javax.swing.JRadioButton jrbtnAleatorio;
    private javax.swing.JRadioButton jrbtnNombre;
    // End of variables declaration//GEN-END:variables

    public String getExtension() {

        if (jcbReproductor.getSelectedIndex() == 0) {//Media Player Clasicc            
            return ".mpcpl";
        } else if (jcbReproductor.getSelectedIndex() == 1) { //WMP
            return ".wpl";
        }
        return "";
    }

    public String getContenidoPlayerClassic(ArrayList<String> l) {
        String str = "MPCPLAYLIST\n";
        for (int i = 0; i < l.size(); i++) {
            str += (1 + i) + ",type,0\n"
                    + (1 + i) + ",filename," + l.get(i) + "\n";
        }
        return str;
    }

    public String getContenidoWMPlayer(ArrayList<String> l) {
        String str = "<?wpl version=\"1.0\"?>\n"
                + "<smil>\n"
                + "    <head>\n"
                + "        <meta name=\"Generator\" content=\"Microsoft Windows Media Player -- 12.0.10586.162\"/>\n"
                + "        <meta name=\"ItemCount\" content=\"" + l.size() + "\"/>\n"
                + "        <title>mi lista</title>\n"
                + "    </head>\n"
                + "    <body>\n"
                + "        <seq>\n";

        for (int i = 0; i < l.size(); i++) {
            str += "            <media src=\"" + l.get(i) + "\"  />\n";
        }
        str += "        </seq>\n"
                + "    </body>\n"
                + "</smil>";
        return str;
    }

    private static void copyFile(File source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } finally {
            is.close();
            os.close();
        }
    }

    private String getExtensionFile(String f) {

        int i = f.lastIndexOf('.');
        if (i > 0) {
            return f.substring(i + 1);
        }
        return "";
    }

}
